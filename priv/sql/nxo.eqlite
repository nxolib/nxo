-- :global_org_id
SELECT global_org_id()

-- :default_group_id
-- 'users' is the name of the default group
SELECT group_id
FROM nxo_groups
WHERE group_name = 'users';

-- :api_token_auth

-- two inputs:
--   $1 -- api token
--   $2 -- org_abbrv
--
-- will find a result where the api_token is valid and the user it is
-- valid for is in the 'api' group specified by the org_abbrv.


WITH tokens (user_id) AS (
  SELECT user_id
  FROM nxo_api_keys
  WHERE api_key = $1
)

SELECT nxo_orgs.org_id, tokens.user_id, org_name, org_abbrv
FROM tokens, nxo_orgs
JOIN nxo_user_orgs USING (org_id)
JOIN nxo_user_groups USING (org_id)
WHERE LOWER(nxo_orgs.org_abbrv) = LOWER($2)
  AND nxo_user_groups.group_id IN
      (SELECT group_id FROM nxo_groups WHERE group_name = 'api')

-- :check_dup (refactored)
SELECT check_dup($1, $2, $3)

-- :check_dup_with_id (refactored)
SELECT check_dup($1, $2, $3, $4, $5)

-- :group_add (refactored)
INSERT INTO nxo_groups
  (group_name, group_label, description, global_only)
VALUES ($1, $2, $3, $4)
ON CONFLICT(group_name)
DO UPDATE SET group_label = $2,
              description = $3,
              global_only = $4
          WHERE nxo_groups.group_name = $1
RETURNING group_name

-- :group_all_groups (refactored)
SELECT
  group_name,
  group_label,
  description,
  global_only
FROM
  nxo_groups
ORDER BY group_label;

-- :group_delete (refactored)
DELETE FROM nxo_groups WHERE group_name = $1

-- :group_find (refactored)
SELECT *
FROM nxo_groups
WHERE group_name = $1

-- -- :group_id
-- SELECT group_id
-- FROM nxo_groups
-- WHERE group_name = $1;

-- :insert_realm (refactored)
INSERT INTO nxo_realms (realm, description, required, group_ids)
VALUES ($1, $2, $3, $4)
ON CONFLICT(realm)
DO UPDATE SET
  description = $2,
  required = $3,
  group_ids = $4
  WHERE nxo_realms.realm = $1
RETURNING realm_id;

-- :org_add (refactored)
INSERT INTO nxo_orgs (org_name, org_abbrv)
VALUES ($1, $2)
ON CONFLICT(org_abbrv)
DO UPDATE SET org_name = $1
          WHERE nxo_orgs.org_abbrv = $2
RETURNING org_abbrv

-- :org_add_user
INSERT INTO nxo_user_orgs (user_id, org_id, is_primary, is_contact, title)
VALUES ($1, $2, $3, $4, $5)

-- :org_contact_add (refactored)
INSERT INTO nxo_org_contact (
         org_abbrv
       , address_1
       , address_2
       , address_3
       , city
       , state
       , country
       , postcode)
VALUES($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT(org_abbrv)
DO UPDATE SET address_1 = $2,
              address_2 = $3,
              address_3 = $4,
              city = $5,
              state = $6,
              country = $7,
              postcode = $8
          WHERE nxo_org_contact.org_abbrv = $1
RETURNING org_abbrv

-- :org_delete (refactored)
DELETE FROM nxo_orgs WHERE org_abbrv = $1

-- :org_find (refactored)
SELECT *
FROM nxo_orgs
LEFT JOIN nxo_org_contact USING (org_abbrv)
WHERE LOWER(org_name) = LOWER($1)
   OR LOWER(org_abbrv) = LOWER($1)

-- :all_orgs (refactored)
SELECT *
FROM nxo_orgs
ORDER BY org_name;

-- :pending_user_count
SELECT COUNT(*)
FROM nxo_user_groups
WHERE group_id = pending_group()

-- ROLES
-- :has_role (refactored)
SELECT CASE WHEN COUNT(*) > 0 THEN true
            ELSE false
       END
FROM nxo_users
WHERE user_id = $1::UUID
  AND (roles && $2
   OR roles && (SELECT groups FROM nxo_realms WHERE realm = $2[1]));

-- :all_roles (refactored)
SELECT roles
FROM nxo_users
WHERE user_id = $1::uuid;


-- :settings_get_group
SELECT setting_group, setting_name, setting_display,
       setting_value, setting_desc, setting_type
FROM nxo_settings
WHERE setting_group = $1
ORDER BY setting_name

-- :settings_get_groups
SELECT setting_group, setting_group_label
FROM nxo_setting_labels
ORDER BY setting_group_label

-- :settings_get_item
SELECT setting_value
FROM nxo_settings
WHERE setting_group = $1
  AND setting_name = $2

-- :settings_set_item
UPDATE nxo_settings
SET setting_value = $3
WHERE setting_group = $1
  AND setting_name = $2

-- :user_active_flag
UPDATE nxo_users
SET active = $2
WHERE user_id::text = $1
RETURNING user_id

-- :user_add (refactored)
INSERT INTO nxo_users
  (user_id, email, phone, first_name, last_name,
   description, active, samaccountname, password, roles)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
ON CONFLICT(user_id)
DO UPDATE SET email = $2,
              phone = $3,
              first_name = $4,
              last_name = $5,
              description = $6,
              active = $7,
              password = $9,
              roles = $10
          WHERE nxo_users.user_id = $1
RETURNING user_id

-- :user_set_roles (refactored)
UPDATE nxo_users
SET roles = $2
WHERE user_id::TEXT = $1
RETURNING roles;

-- :user_add_org (refactored)
INSERT INTO nxo_user_orgs (user_id, org_abbrv, is_contact, title)
VALUES ($1, $2, $3, $4)
ON CONFLICT (user_id, org_abbrv)
DO UPDATE SET is_contact = $3, title = $4
WHERE nxo_user_orgs.user_id = $1 AND nxo_user_orgs.org_abbrv = $2;

-- :user_delete_org (refactored)
DELETE FROM nxo_user_orgs
WHERE user_id = $1 AND org_abbrv = $2;

-- :user_all (refactored)
SELECT
  u.user_id,
  u.email,
  u.password,
  u.phone,
  u.first_name,
  u.last_name,
  u.first_name || ' ' || u.last_name AS display_name,
  u.description,
  u.samaccountname,
  u.active,
  u.roles,
  (SELECT '{ "global::pending" }' @> roles) AS is_pending,
  '{ "global" }' || ARRAY((SELECT org_abbrv
                             FROM nxo_user_orgs uo
                            WHERE u.user_id = uo.user_id)) AS orgs
FROM
  nxo_users u
ORDER BY is_pending DESC, u.last_name, u.first_name;


-- :user_delete
DELETE FROM nxo_users WHERE user_id::text = $1

-- :user_find
SELECT
  u.user_id,
  u.email,
  u.password,
  u.phone,
  u.first_name,
  u.last_name,
  u.first_name || ' ' || u.last_name AS display_name,
  u.description,
  u.samaccountname,
  u.active,
  u.roles,
  (SELECT '{ "global::pending" }' @> roles) AS is_pending,
  '{ "global" }' || ARRAY((SELECT org_abbrv
                             FROM nxo_user_orgs uo
                            WHERE u.user_id = uo.user_id)) AS orgs
FROM
  nxo_users u
WHERE
  ($1::TEXT IS NOT NULL AND $1::TEXT !='')
  AND (LOWER(email) = LOWER($1)
      OR u.user_id::TEXT = $1
      OR LOWER(samaccountname) = LOWER($1));


-- :user_org (refactored)
SELECT is_contact, title
FROM nxo_user_orgs
WHERE user_id::TEXT = $1 AND org_abbrv = $2;

-- :user_remove_other_orgs (refactored)
DELETE FROM nxo_user_orgs
WHERE user_id::TEXT = $1 AND (NOT (org_abbrv = ANY($2)));

-- :user_get_password
SELECT password
FROM nxo_users
WHERE user_id = $1

-- :user_is_pending
SELECT COUNT(*)
FROM nxo_user_groups
WHERE
  user_id = $1
  AND
  group_id = (select group_id from nxo_groups where group_name = 'pending')

-- :user_org_add
INSERT INTO nxo_user_orgs (user_id, org_id, is_contact, title)
VALUES ($1, $2, $3, $4)
ON CONFLICT(user_id, org_id)
DO UPDATE SET is_contact = $3,
              title = $4
          WHERE nxo_user_orgs.user_id = $1
            and nxo_user_orgs.org_id = $2
RETURNING user_id, org_id

-- :user_set_password
UPDATE nxo_users
SET password = $2
WHERE user_id::text = $1 OR email = $1::text
